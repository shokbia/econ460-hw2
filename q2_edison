library(Matrix)
library(gamlr)

# random seed
set.seed(0)

# daata preparation (from dong's read_onlinespending.R)
browser_spend <- read.csv("C:\\Users\\rawre\\Downloads\\browser-totalspend.csv")
yspend <- browser_spend$spend

web <- read.csv("C:\\Users\\rawre\\Downloads\\browser-domains.csv")
sitenames <- scan("C:\\Users\\rawre\\Downloads\\browser-sites.txt", what="character")
web$site <- factor(web$site, levels=1:length(sitenames), labels=sitenames)
web$id <- factor(web$id, levels=1:length(unique(web$id)))

machinetotals <- as.vector(tapply(web$visits, web$id, sum))
visitpercent <- 100 * web$visits / machinetotals[web$id]

xweb <- sparseMatrix(i = as.numeric(web$id), 
                     j = as.numeric(web$site), 
                     x = visitpercent,
                     dims = c(nlevels(web$id), nlevels(web$site)),
                     dimnames = list(id = levels(web$id), site = levels(web$site)))

# log spending variable
log_yspend <- log(yspend)

# 2a 
#Sample split 8000 for estimation, 2000 for holdout
n <- 8000
m <- 2000
sample_indices <- sample.int(length(log_yspend), n, replace = FALSE)

# Split data
xweb_est <- xweb[sample_indices, ]
log_yspend_est <- log_yspend[sample_indices]

xweb_holdout <- xweb[-sample_indices, ]
log_yspend_holdout <- log_yspend[-sample_indices]

# 5-fold cross-validated lasso on estimation sample
cat("2a running 5-fold cross-validated lasso on estimation sample...\n")
cv_lasso_est <- cv.gamlr(xweb_est, log_yspend_est, nfold = 5, verb = TRUE)

# Plot out-of-sample cross validation error
plot(cv_lasso_est, main = "Out-of-Sample CV Error vs Lambda")

# 2b in-sample prediction error
lambda_min <- cv_lasso_est$lambda.min
lasso_min <- gamlr(xweb_est, log_yspend_est, lambdas = lambda_min)

# predictions for estimation sample
pred_est <- predict(lasso_min, xweb_est, type = "response")

# MSE in-sample prediction error
in_sample_error <- mean((log_yspend_est - pred_est)^2)
cat("2b. In-sample prediction error:", in_sample_error, "\n")

# 2c oos prediction error
# use model trained on estimation sample to predict holdout sample
pred_holdout <- predict(lasso_min, xweb_holdout, type = "response")

# calc mse oos prediction error
out_of_sample_error <- mean((log_yspend_holdout - pred_holdout)^2)
cat("2c. Out-of-sample prediction error using holdout:", out_of_sample_error, "\n")

# Comparison
cat("Comparisons..... \n")
cat("In-sample MSE:", in_sample_error, "\n")
cat("Out-of-sample MSE:", out_of_sample_error, "\n")
cat("Ratio (OOS/IS):", out_of_sample_error / in_sample_error, "\n")
cat("The out-of-sample error is", 
    round((out_of_sample_error/in_sample_error - 1)*100, 1), 
    "% higher than the in-sample error.\n")

